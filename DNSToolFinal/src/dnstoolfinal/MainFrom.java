/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package dnstoolfinal;
import  exception.*;
import java.awt.EventQueue;
import java.util.HashMap;
import java.util.Map;
import java.util.Random;
import javax.swing.JOptionPane;
/**
 *
 * @author longy
 */
public class MainFrom extends javax.swing.JFrame {

    /**
     * Creates new form MainFrom
     */
    //Tạo các biến sử dụng trong chương trình
    Storage storageClass = new Storage();
    HashMap<Integer,Sensor> listSensor =  new HashMap();
    //End
    public MainFrom() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        lblKeNgang = new javax.swing.JLabel();
        lblSensorProperties = new javax.swing.JLabel();
        lblRadius = new javax.swing.JLabel();
        lblOffsetAngle = new javax.swing.JLabel();
        lblT0 = new javax.swing.JLabel();
        txtRadius = new javax.swing.JTextField();
        txtOffsetAngle = new javax.swing.JTextField();
        txtT0 = new javax.swing.JTextField();
        lblKeNgang1 = new javax.swing.JLabel();
        lblArea = new javax.swing.JLabel();
        lblH = new javax.swing.JLabel();
        lblW = new javax.swing.JLabel();
        lblP = new javax.swing.JLabel();
        lblT = new javax.swing.JLabel();
        txtH = new javax.swing.JTextField();
        txtW = new javax.swing.JTextField();
        txtP = new javax.swing.JTextField();
        txtT = new javax.swing.JTextField();
        lblKeNgang2 = new javax.swing.JLabel();
        btnClear = new javax.swing.JButton();
        btnCalculate = new javax.swing.JButton();
        btnDeploy = new javax.swing.JButton();
        btnDrawNetwork = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txaResult = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Directinal Sensor Network Tool");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setResizable(false);

        lblTitle.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        lblTitle.setText("Directional Sensor Network Tool");

        lblKeNgang.setText("-----------------------------------------------------------------------------------------------------------------------------------");

        lblSensorProperties.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        lblSensorProperties.setText("Sensor Properties");

        lblRadius.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        lblRadius.setText("Radius(m)");

        lblOffsetAngle.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        lblOffsetAngle.setText("Offset angle(0<x<180)");

        lblT0.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        lblT0.setText("LifeTime(s)");

        txtRadius.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N

        txtOffsetAngle.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N

        txtT0.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N

        lblKeNgang1.setText("-----------------------------------------------------------------------------------------------------------------------------------");

        lblArea.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        lblArea.setText("Area");

        lblH.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        lblH.setText("Height(m)");

        lblW.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        lblW.setText("Width(m)");

        lblP.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        lblP.setText("Coverage rate(0<p<=1)");

        lblT.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        lblT.setText("Lifetime of Network(s)");

        txtH.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N

        txtW.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N

        txtP.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N

        txtT.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N

        lblKeNgang2.setText("-----------------------------------------------------------------------------------------------------------------------------------");

        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        btnCalculate.setText("Calculate");
        btnCalculate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCalculateActionPerformed(evt);
            }
        });

        btnDeploy.setText("Deploy");
        btnDeploy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeployActionPerformed(evt);
            }
        });

        btnDrawNetwork.setText("Draw Network");
        btnDrawNetwork.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDrawNetworkActionPerformed(evt);
            }
        });

        txaResult.setEditable(false);
        txaResult.setColumns(20);
        txaResult.setRows(5);
        jScrollPane1.setViewportView(txaResult);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblKeNgang, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblKeNgang1, javax.swing.GroupLayout.PREFERRED_SIZE, 580, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblArea))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(lblKeNgang2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(112, 112, 112)
                                .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 349, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(lblSensorProperties))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblT0)
                                    .addComponent(lblRadius)
                                    .addComponent(lblOffsetAngle))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtRadius, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtOffsetAngle, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtT0, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblT)
                                    .addComponent(lblP)
                                    .addComponent(lblW)
                                    .addComponent(lblH))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtH, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtW, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtP, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtT, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(25, 25, 25)
                                .addComponent(btnClear)
                                .addGap(18, 18, 18)
                                .addComponent(btnCalculate)
                                .addGap(18, 18, 18)
                                .addComponent(btnDeploy)
                                .addGap(18, 18, 18)
                                .addComponent(btnDrawNetwork)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 572, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTitle)
                .addGap(18, 18, 18)
                .addComponent(lblKeNgang)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblSensorProperties)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblRadius)
                                    .addComponent(txtRadius, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(lblOffsetAngle))
                            .addComponent(txtOffsetAngle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(lblT0))
                    .addComponent(txtT0, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addComponent(lblKeNgang1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblArea)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(lblH)
                                            .addComponent(txtH, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, 18)
                                        .addComponent(lblW))
                                    .addComponent(txtW, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(lblP))
                            .addComponent(txtP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(lblT))
                    .addComponent(txtT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(lblKeNgang2)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnClear)
                    .addComponent(btnCalculate)
                    .addComponent(btnDeploy)
                    .addComponent(btnDrawNetwork))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 271, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        //Xử lý xóa toàn bộ nội dung trong các textbox và textArea
        txtH.setText((""));
        txtOffsetAngle.setText((""));
        txtP.setText((""));
        txtRadius.setText((""));
        txtT.setText((""));
        txtT0.setText((""));
        txtW.setText((""));
        txaResult.setText("");
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnCalculateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCalculateActionPerformed
        // Tính toán số lượng cảm biến cần phải thả:
        try {
            //Kiểm tra có ô nào không nhập hay không
            checkNull();
            //Gán các giá trị vừa nhập để sử dụng toàn cục
            storageClass.setAnpla(Double.parseDouble(txtOffsetAngle.getText().trim()));
            storageClass.setH(Float.parseFloat(txtH.getText().trim()));
            storageClass.setP(Float.parseFloat(txtP.getText().trim()));
            storageClass.setR(Double.parseDouble(txtRadius.getText().trim()));
            storageClass.setT0(Integer.parseInt(txtT0.getText().trim()));
            storageClass.setT(Integer.parseInt(txtT.getText().trim()));
            storageClass.setW(Float.parseFloat(txtW.getText().trim()));
            //Kiểm tra các lỗi về giá trị của từng biến nhập vào
            checkRadius(storageClass.getR());
            checkAngle(storageClass.getAnpla());
            checkLifeTime(storageClass.getT());
            checkHeight(storageClass.getH());
            checkWidth(storageClass.getW());
            checkCoverage(storageClass.getP());
            checkTimeOfSensor(storageClass.getT0());
            //Trả về kết quả tính toán của mạng.
            txaResult.setText(storageClass.toString());
        } catch (NullException e) {
            JOptionPane.showMessageDialog(rootPane, e.getMessage());
        }
        catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(rootPane, "Input format wrong!! Try again!!");
        }
        catch (RadiusException | OffsetAngleException | HeghtException | WidthException | LifeTimeException | CoverageException | TimeOfSensorException ex){
            JOptionPane.showMessageDialog(rootPane, ex.getMessage());
        }
    }//GEN-LAST:event_btnCalculateActionPerformed

    private void btnDeployActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeployActionPerformed
        //Thả ngẫu nhiên các sensor
        Random r =  new Random();
        for(int i =0; i<storageClass.getGroup();i++)
        {
            int j = storageClass.getN0()*i+1;
            int maxS = storageClass.getN0()*(i+1);
            while(j<=maxS)
            {
                int x = (int) (Math.abs(r.nextInt()) % storageClass.getW()); //Defind x for each sensor. 
                int y = (int) (Math.abs(r.nextInt()) % storageClass.getH()); //Defind y for each sensor.
                float mina=0;
                float maxa=(float) (Math.PI*2);
                float anpla = ( r.nextFloat()* (maxa - mina+ 1) + mina);
                listSensor.put(j,new Sensor(x, y, storageClass.getR(), (float) storageClass.getAnpla(),storageClass.getT0(), (float) Math.cos(anpla), (float) Math.sin(anpla)));
                j++;
            }
        }
        //Tìm và thêm danh sách các sensor nằm trong vùng kết nối của từng sensor
        for(int i =0; i<storageClass.getGroup();i++)
        {
            int j = storageClass.getN0()*i+1;
            int maxS = storageClass.getN0()*(i+1);
            while(j<maxS)
            {
                for(int k = j+1;k<=maxS;k++)
                {
                    if(listSensor.get(j).checkConnect(listSensor.get(k))) listSensor.get(j).addADJSensor(k);
                }
                j++;
            }
        }
        
        txaResult.append("\n--------------------------------------\n");
        txaResult.append("Coordinates of sensor:\n");
        //In danh sách các cảm biến ra màn hình.
        for(Map.Entry m: listSensor.entrySet())
        {
            txaResult.append(m.getKey()+ " " );
            Sensor s = (Sensor) m.getValue();
            txaResult.append(s.getX0() + " " + s.getY0() + " | " + s.getListADJ().toString() +" |\n");
        }
        txaResult.append("\n--------------------------------------\n");
        //In các sinknode của từng nhóm.
        for(int i = 0;i<storageClass.getGroup();i++)
        {
            int n0 = storageClass.getN0();
            int maxADJ = 0;
            int keyMaxADJ = 0;
            for(int j = n0*i+1;j<=n0*(i+1);j++)
            {
                Sensor s = listSensor.get(j);
                if(s.getListADJ().size()> maxADJ){
                    maxADJ = s.getListADJ().size();
                    keyMaxADJ = j; 
                }
            }
            Sensor s = listSensor.get(keyMaxADJ);
            txaResult.append(keyMaxADJ + " " + s.getX() + " " + s.getY() + " " + s.getDx() + " " + s.getDy() + " |" + s.getListADJ().toString() +"\n");
        }
    }//GEN-LAST:event_btnDeployActionPerformed

    private void btnDrawNetworkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDrawNetworkActionPerformed
        // TODO add your handling code here:
        try {
            EventQueue.invokeLater(new Runnable() {
                @Override
                public void run() {
                    Simulator ex = new Simulator(storageClass.getN(),storageClass.getGroup(),(int)storageClass.getW(),(int)storageClass.getH(),(int) storageClass.getR(),listSensor);
                    ex.setVisible(true);
                }
            });
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, e.getMessage());
        }
    }//GEN-LAST:event_btnDrawNetworkActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrom.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrom.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrom.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrom.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new MainFrom().setVisible(true);
            }
        });
    }

    //Định nghĩa các ngoại lệ
     private void checkNull() throws NullException{
        if(txtP.getText().trim().equals("")) throw new NullException("Coverage null!! Try again!!");
        if(txtH.getText().trim().equals("")) throw new NullException("Height null!! Try again!!");
        if(txtT.getText().trim().equals("")) throw new NullException("LifeTime of Network null!! Try again!!");
        if(txtOffsetAngle.getText().trim().equals("")) throw new NullException("Angle null!! Try again!!");
        if(txtRadius.getText().trim().equals(""))throw new NullException("Radius null!! Try again!!");
        if(txtT0.getText().trim().equals("")) throw new NullException("Time null!! Try again!!");
        if(txtW.getText().trim().equals("")) throw new NullException("Width null!! Try again!!");
    }
    private void checkRadius(double r) throws RadiusException{
        if(r<=0||r>100) throw new RadiusException("Radius must be between 0 and 100!! Try again");
    }
    private void checkAngle(double anpla) throws OffsetAngleException{
        if(anpla<=0||anpla>180)throw new OffsetAngleException("Angle is not in the range 0->180!!Try again");
    }
    private void checkLifeTime(int t) throws LifeTimeException{
        if(t<=0||t>18000)throw new LifeTimeException("LifeTime must be between 0 and 18000 !! Try again ");
    }
    private void checkHeight(float height) throws HeghtException{
       if(height<=0||height>1000)throw new HeghtException("Height must be between 0 and 1000 !! Try again ");
    }
    private void checkWidth(float width) throws WidthException{
        if(width<=0||width>1000)throw new WidthException("Width must be between 0 and 1000 !! Try again ");
    }
    private void checkCoverage(float p) throws CoverageException{
        if(p<=0||p>1)throw new CoverageException("Coverage must be between 0 and 1 !! Try again ");
    }
    private void checkTimeOfSensor(int t0) throws TimeOfSensorException{
       if(t0<=0||t0>3600*24)throw new TimeOfSensorException("Width must be between 0 and 86400 !! Try again ");
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCalculate;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnDeploy;
    private javax.swing.JButton btnDrawNetwork;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblArea;
    private javax.swing.JLabel lblH;
    private javax.swing.JLabel lblKeNgang;
    private javax.swing.JLabel lblKeNgang1;
    private javax.swing.JLabel lblKeNgang2;
    private javax.swing.JLabel lblOffsetAngle;
    private javax.swing.JLabel lblP;
    private javax.swing.JLabel lblRadius;
    private javax.swing.JLabel lblSensorProperties;
    private javax.swing.JLabel lblT;
    private javax.swing.JLabel lblT0;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblW;
    private javax.swing.JTextArea txaResult;
    private javax.swing.JTextField txtH;
    private javax.swing.JTextField txtOffsetAngle;
    private javax.swing.JTextField txtP;
    private javax.swing.JTextField txtRadius;
    private javax.swing.JTextField txtT;
    private javax.swing.JTextField txtT0;
    private javax.swing.JTextField txtW;
    // End of variables declaration//GEN-END:variables
}
